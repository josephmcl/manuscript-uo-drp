%
% Intro
%
%
% 
%
Numerical solutions to linear elliptic partial differential equations (PDEs) are widely sought across mathematics, engineering, and computer science and are commonly used to model physical systems in steady-state or time-independent forms. 
Performant and flexible approaches of encoding increasingly large systems are always of interest as scale of computing resources continue to grow. 
Elliptical PDE problems involve setting up and solving a numerical linear system of equations which tend to be dominated by memory-bound operations.
The most successful high-performance techniques employ more favorable mathematics that reduce computational overhead and greatly optimize specific computational kernels to take full advantage of modern hardware. 

%
% 
%
Hybridization \emph{i.e.}, Guyan reduction \citep{guyan1965reduction} or static condensation \citep{wilson1974static}, is one approach to reducing the computational complexity of  computational systems. 
Hybridization is more utilized using finite elements \citep{rhebergen2017analysis, frigo2021efficient, fernandez2017hybridized}, but recent work from \citet{kozdon2021hybridized} has brought it into finite differences as well. 
This method reduces the complexity of the computational system, assembled as a system of coupled sub-domains that can each be solved independently alongside an additional global system. 
In a shared memory context this independence allows problems to be computed that would otherwise utilize too much memory. 

%
%
%
Conventionally, this has lent hybridization the reputation of being mostly a tool for coupling otherwise unwieldy problems together, and less a consideration of performance. 
Either, a problem is too large to fit into memory and is Hybridized into smaller problems, or multiple problems that would otherwise be difficult to represent in a single domain is coupled via Hybridization.

%
%
%
In contrast to the conventional wisdom, recent work from \citet{dean2023design} intentionally utilizes hybridization to demonstrate strong and weak scaling on a massively parallel problem assembled as a discontinuous Galerkin method. 
Another paper from \citet{badrkhani2023matrix} utilizes hybridization to couple large matrix-free sub-domains together for competitive performance results. 

%
%
%
The flexibility of hybridization makes it a compelling choice for a computing large parallel problems. 
Each sub-domain in a Hybridized problem is solved independently, though several of the \emph{building blocks} needed to assemble a local problem can be shared between problems further reducing the computational complexity. 
However, increasing the number of local problem has the effect of increasing the size of the global problem. 
It follows that there should exist a trade off between the number of local problems and cost of computing the global system. 
Numerical analysis commonly deals with the numerical accuracy of a problem, but rarely considers time-to-solution a property of problem. 
Yet, there exists fundamental relationship between the scale and orientation of a computation and performance.


%\begin{enumerate}[label=\textbf{\footnotesize RQ\arabic*.}]
%	\item {Does varying the number of elements in a homogeneous hybridized problem improve time-to-solution (TTS) significantly?}
%	\item {Is there an ideal number of elements for performance, and does it vary with other quantities like problem size or thread count?}
%\end{enumerate}


%What is currently lacking in our understanding of the hyrbidized FD and 
%FE methods is the relationship between meshing and computational performance. Several authors have discussed numerical performance as it relates to meshing and
%the order of the approximation of the PDE being solved \citep{}. However, the discussion of computation performance as it relates to meshing characteristics is limited. This may be in a large part due to the reality that methods that allow the local problems to be solves independent of global trace problem are relatively 
%uncommon and specialized. 

%
% 
%
In this work we explore that trade off in a shared-memory CPU-based problem. 
We assemble a problem in hybridized SBP-SAT finite difference scheme, solving the 2-D Poisson equation, coupling multiple sub-domains with penalty terms analogous to Dirichlet boundary conditions \emph{i.e.}, numerical fluxes as given in finite elements, proportionally varying the volume points within each sub-domain as to fix the number of total volume points. 
We implement this in {\color{red}PETSc} and view performance as a function of the number of volume points in each element \emph{i.e.}, the element size, yielding a strong and weak scaling analysis. 
Throughout this work the terms sub-domain and element are used interchangeably to refer to the coupled problems within a hybridized problem. 

%
% What are 
%





